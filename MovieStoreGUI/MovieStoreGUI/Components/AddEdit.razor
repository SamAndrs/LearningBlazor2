@page "/addeditMovie"
@page "/addeditMovie/{id:int}"

@rendermode InteractiveServer

@inject NavigationManager NavigationManager
@inject MoviesClient MoviesClient
@inject GenresClient GenresClient

<PageTitle>@title</PageTitle>

<h3>@title</h3>
@if(genres is null || movie is null)
{
	<p>Loading...</p>
}
else
{
	<div class="row">
		<div class="col-md-4">
			<EditForm Model="@movie" FormName="addeditMovie" OnValidSubmit="HandleSubmitAsync">
				<DataAnnotationsValidator/>
				<div class="form-floating mb-3">
					<InputText class="form-control" id="name" @bind-Value="movie.Name"/>
					<label for="name">Name:</label>
					<ValidationMessage For="() => movie.Name"/>
				</div>

				<div class="form-floating mb-3">
					<InputSelect id="genre" class="form-select" @bind-Value="movie.GenreId">
						<option value="Select a genre"></option>
						@foreach(var genre in genres)
						{
							<option value="@genre.Id">@genre.Name</option>
						}
					</InputSelect>
					<label for="genre">Genre:</label>
					<ValidationMessage For="() => movie.GenreId" />
				</div>

				<div class="form-floating mb-3">
					<InputNumber class="form-control" id="price" @bind-Value="movie.Price"/>
					<label for="price">Price:</label>
					<ValidationMessage For="() => movie.Price" />
				</div>

				<div class="form-floating mb-3">
					<InputDate class="form-control" id="releaseDate" @bind-Value="movie.ReleaseDate"/>
					<label for="releaseDate">Release date:</label>
					<ValidationMessage For="() => movie.ReleaseDate" />
				</div>

				<button type="submit" class="btn btn-primary">Save</button>
				<a role="button" class="btn btn-outline-secondary" href="/">Cancel</a>
			</EditForm>
		</div>
	</div>
}


@code {
	// if an id is supplied with the route, then add the value into this property
	[Parameter]
	public int? Id { get; set; }

	// fetch the movie object from the Form's parameters.
	[SupplyParameterFromForm]
	private Movie? movie { get; set; }

	public Genre[] genres = Array.Empty<Genre>();

	private string? title;

	protected override async Task OnParametersSetAsync()
	{
		// if a movie is found, then go no further
		if(movie is not null)
		{
			return;
		}

		// if an Id is supplied upon loading, fetch the corresponding movie
		if(Id.HasValue)
		{
			movie = await MoviesClient.GetMovieAsync(Id.Value);
			title = $"Edit Movie: {movie.Name}";
		}
		// if we're not given an id value, then likely we are trying to add a new movie.
		else
		{
			movie = new() { Name = string.Empty, ReleaseDate = DateOnly.FromDateTime(DateTime.UtcNow) };
			title = $"Add New Movie";
		}
	}

	// when the component loads, fetch all available genres and add them to the array
	protected override async Task OnInitializedAsync()
	{
		genres = await GenresClient.GetGenresAsync();
	}

	private async Task HandleSubmitAsync()
	{
		ArgumentNullException.ThrowIfNull(movie);
		if(Id is null)
		{
			await MoviesClient.AddMovieAsync(movie);
		}
		else
		{
			movie.Id = Id.Value;
			await MoviesClient.UpdateMovieAsync(movie);
		}
		NavigationManager.NavigateTo("/");
	}
}
